/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SvgIndexImport } from './routes/svg/index'
import { Route as RwdIndexImport } from './routes/rwd/index'
import { Route as ReflectionIndexImport } from './routes/reflection/index'
import { Route as CarouselIndexImport } from './routes/carousel/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SvgIndexRoute = SvgIndexImport.update({
  id: '/svg/',
  path: '/svg/',
  getParentRoute: () => rootRoute,
} as any)

const RwdIndexRoute = RwdIndexImport.update({
  id: '/rwd/',
  path: '/rwd/',
  getParentRoute: () => rootRoute,
} as any)

const ReflectionIndexRoute = ReflectionIndexImport.update({
  id: '/reflection/',
  path: '/reflection/',
  getParentRoute: () => rootRoute,
} as any)

const CarouselIndexRoute = CarouselIndexImport.update({
  id: '/carousel/',
  path: '/carousel/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/carousel/': {
      id: '/carousel/'
      path: '/carousel'
      fullPath: '/carousel'
      preLoaderRoute: typeof CarouselIndexImport
      parentRoute: typeof rootRoute
    }
    '/reflection/': {
      id: '/reflection/'
      path: '/reflection'
      fullPath: '/reflection'
      preLoaderRoute: typeof ReflectionIndexImport
      parentRoute: typeof rootRoute
    }
    '/rwd/': {
      id: '/rwd/'
      path: '/rwd'
      fullPath: '/rwd'
      preLoaderRoute: typeof RwdIndexImport
      parentRoute: typeof rootRoute
    }
    '/svg/': {
      id: '/svg/'
      path: '/svg'
      fullPath: '/svg'
      preLoaderRoute: typeof SvgIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/carousel': typeof CarouselIndexRoute
  '/reflection': typeof ReflectionIndexRoute
  '/rwd': typeof RwdIndexRoute
  '/svg': typeof SvgIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/carousel': typeof CarouselIndexRoute
  '/reflection': typeof ReflectionIndexRoute
  '/rwd': typeof RwdIndexRoute
  '/svg': typeof SvgIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/carousel/': typeof CarouselIndexRoute
  '/reflection/': typeof ReflectionIndexRoute
  '/rwd/': typeof RwdIndexRoute
  '/svg/': typeof SvgIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/carousel' | '/reflection' | '/rwd' | '/svg'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/carousel' | '/reflection' | '/rwd' | '/svg'
  id: '__root__' | '/' | '/carousel/' | '/reflection/' | '/rwd/' | '/svg/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CarouselIndexRoute: typeof CarouselIndexRoute
  ReflectionIndexRoute: typeof ReflectionIndexRoute
  RwdIndexRoute: typeof RwdIndexRoute
  SvgIndexRoute: typeof SvgIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CarouselIndexRoute: CarouselIndexRoute,
  ReflectionIndexRoute: ReflectionIndexRoute,
  RwdIndexRoute: RwdIndexRoute,
  SvgIndexRoute: SvgIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/carousel/",
        "/reflection/",
        "/rwd/",
        "/svg/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/carousel/": {
      "filePath": "carousel/index.tsx"
    },
    "/reflection/": {
      "filePath": "reflection/index.tsx"
    },
    "/rwd/": {
      "filePath": "rwd/index.tsx"
    },
    "/svg/": {
      "filePath": "svg/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
